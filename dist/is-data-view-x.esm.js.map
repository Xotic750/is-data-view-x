{"version":3,"sources":["../src/is-data-view-x.js"],"names":[],"mappings":";;;;AAAA,OAAO,OAAP,MAAoB,WAApB;AACA,OAAO,YAAP,MAAyB,kBAAzB;AACA,OAAO,cAAP,MAA2B,qBAA3B;AACA,OAAO,wBAAP,MAAqC,sCAArC;AACA,OAAO,WAAP,MAAwB,iBAAxB;AACA,OAAO,aAAP,MAA0B,mBAA1B;AAEA,IAAM,QAAQ,GAAG,OAAO,QAAP,KAAoB,UAArC;AACA,IAAI,aAAa,GAAG,KAApB;AACA,IAAI,WAAJ;;AAEA,IAAI,QAAJ,EAAc;AACZ,MAAI,GAAG,GAAG,OAAO,CAAC,YAAM;AAAA;;AACtB;AACA,WAAO,IAAI,QAAJ,CAAa,IAAI,WAAJ,CAAgB,CAAhB,CAAb,CAAP;AACD,GAHgB,YAAjB;AAKA,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAJ,KAAc,KAAd,IAAuB,YAAY,CAAC,GAAG,CAAC,KAAL,CAAnC,IAAkD,GAAG,CAAC,KAAvE;;AAEA,MAAI,QAAQ,IAAI,cAAhB,EAAgC;AAC9B;AACA,QAAM,UAAU,GAAG,wBAAwB,CAAC,QAAQ,CAAC,SAAV,EAAqB,YAArB,CAA3C;;AAEA,QAAI,UAAU,IAAI,OAAO,UAAU,CAAC,GAAlB,KAA0B,UAA5C,EAAwD;AACtD,MAAA,GAAG,GAAG,OAAO,CAAC,IAAR,CAAa,QAAb,EAAuB,UAAU,CAAC,GAAlC,CAAN;AACA,MAAA,aAAa,GAAG,GAAG,CAAC,KAAJ,KAAc,KAAd,IAAuB,OAAO,GAAG,CAAC,KAAX,KAAqB,QAA5C,IAAwD,UAAU,CAAC,GAAnF;AACD;AACF;;AAED,MAAI,aAAa,KAAK,KAAtB,EAA6B;AAC3B,QAAM,QAAQ,GAAG,mBAAjB;;AAEA,QAAI,WAAW,CAAC,QAAD,CAAX,KAA0B,QAA9B,EAAwC;AACtC,MAAA,WAAW,GAAG,SAAS,YAAT,CAAsB,MAAtB,EAA8B;AAC1C,eAAO,WAAW,CAAC,MAAD,CAAX,KAAwB,QAA/B;AACD,OAFD;AAGD,KAJD,MAIO;AACL,MAAA,WAAW,GAAG,SAAS,YAAT,CAAsB,MAAtB,EAA8B;AAC1C,YAAM,YAAY,GAAG,OAAO,MAAM,CAAC,UAAd,KAA6B,QAAlD;AACA,YAAM,YAAY,GAAG,OAAO,MAAM,CAAC,UAAd,KAA6B,QAAlD;AACA,YAAM,YAAY,GAAG,OAAO,MAAM,CAAC,UAAd,KAA6B,UAAlD;AACA,YAAM,YAAY,GAAG,OAAO,MAAM,CAAC,UAAd,KAA6B,UAAlD;AAEA,eAAO,YAAY,IAAI,YAAhB,IAAgC,YAAhC,IAAgD,YAAhD,IAAgE,aAAa,CAAC,MAAM,CAAC,MAAR,CAApF;AACD,OAPD;AAQD;AACF;AACF;AAED;;;;;;;;AAMA,IAAM,UAAU,GAAG,SAAS,UAAT,CAAoB,MAApB,EAA4B;AAC7C,MAAI,QAAQ,KAAK,KAAb,IAAsB,YAAY,CAAC,MAAD,CAAZ,KAAyB,KAAnD,EAA0D;AACxD,WAAO,KAAP;AACD;;AAED,MAAI,WAAJ,EAAiB;AACf,WAAO,WAAW,CAAC,MAAD,CAAlB;AACD;;AAED,MAAM,MAAM,GAAG,OAAO,CAAC,IAAR,CAAa,MAAb,EAAqB,aAArB,CAAf;AAEA,SAAO,MAAM,CAAC,KAAP,KAAiB,KAAjB,IAA0B,OAAO,MAAM,CAAC,KAAd,KAAwB,QAAzD;AACD,CAZD;;AAcA,eAAe,UAAf","file":"is-data-view-x.esm.js","sourcesContent":["import attempt from 'attempt-x';\nimport isObjectLike from 'is-object-like-x';\nimport hasToStringTag from 'has-to-string-tag-x';\nimport getOwnPropertyDescriptor from 'object-get-own-property-descriptor-x';\nimport toStringTag from 'to-string-tag-x';\nimport isArrayBuffer from 'is-array-buffer-x';\n\nconst hasDView = typeof DataView === 'function';\nlet getByteLength = false;\nlet legacyCheck;\n\nif (hasDView) {\n  let res = attempt(() => {\n    /* eslint-disable-next-line compat/compat */\n    return new DataView(new ArrayBuffer(4));\n  });\n\n  const dataView = res.threw === false && isObjectLike(res.value) && res.value;\n\n  if (dataView && hasToStringTag) {\n    /* eslint-disable-next-line compat/compat */\n    const descriptor = getOwnPropertyDescriptor(DataView.prototype, 'byteLength');\n\n    if (descriptor && typeof descriptor.get === 'function') {\n      res = attempt.call(dataView, descriptor.get);\n      getByteLength = res.threw === false && typeof res.value === 'number' && descriptor.get;\n    }\n  }\n\n  if (getByteLength === false) {\n    const dViewTag = '[object DataView]';\n\n    if (toStringTag(dataView) === dViewTag) {\n      legacyCheck = function _legacyCheck(object) {\n        return toStringTag(object) === dViewTag;\n      };\n    } else {\n      legacyCheck = function _legacyCheck(object) {\n        const isByteLength = typeof object.byteLength === 'number';\n        const isByteOffset = typeof object.byteOffset === 'number';\n        const isGetFloat32 = typeof object.getFloat32 === 'function';\n        const isSetFloat64 = typeof object.setFloat64 === 'function';\n\n        return isByteLength && isByteOffset && isGetFloat32 && isSetFloat64 && isArrayBuffer(object.buffer);\n      };\n    }\n  }\n}\n\n/**\n * Determine if an `object` is an `DataView`.\n *\n * @param {*} object - The object to test.\n * @returns {boolean} `true` if the `object` is a `DataView`, else `false`.\n */\nconst isDataView = function isDataView(object) {\n  if (hasDView === false || isObjectLike(object) === false) {\n    return false;\n  }\n\n  if (legacyCheck) {\n    return legacyCheck(object);\n  }\n\n  const result = attempt.call(object, getByteLength);\n\n  return result.threw === false && typeof result.value === 'number';\n};\n\nexport default isDataView;\n"]}